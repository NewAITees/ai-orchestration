[project]
name = "ai-orchestration"
version = "0.1.0"
description = "AI小説生成オーケストレーションシステム"
authors = [
    {name = "NewAITees", email = "newaitees@gmail.com"}
]
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
keywords = ["ai", "orchestration", "novel", "llm"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "pydantic>=2.5.0",
    "fastapi>=0.100.0",
    "httpx>=0.25.0",
    "python-dotenv>=1.0.0",
    "agno>=1.3.5,<2.0.0",
    "ollama>=0.4.8,<0.5.0",
    "asyncio-mqtt>=0.13.0",
]

[project.optional-dependencies]
dev = [
    # テスト
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",

    # コード品質
    "ruff>=0.1.8",
    "mypy>=1.7.0",
    "pre-commit>=3.6.0",

    # セキュリティ
    "bandit>=1.7.5",
    "safety>=2.3.0",

    # ドキュメント
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",

    # 開発ツール
    "ipython>=8.17.0",
    "rich>=13.7.0",
]

performance = [
    "uvloop>=0.19.0",
    "orjson>=3.9.0",
]

monitoring = [
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
]

[project.scripts]
ai-orchestrator = "orchestration.main:main"
novel-writer = "orchestration.cui.novel_writer:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["orchestration"]

# Ruff設定
[tool.ruff]
line-length = 100
target-version = "py312"
exclude = [
    ".git", ".ruff_cache", ".venv", ".vscode",
    "__pycache__", "*.egg-info", "build", "dist", "node_modules"
]

[tool.ruff.lint]
preview = true
select = [
    # Pycodestyle
    "E", "W",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # pep8-naming
    "N",
    # flake8-annotations
    "ANN",
    # flake8-async
    "ASYNC",
    # flake8-trio
    "TRIO",
    # pathlib
    "PTH",
    # pandas-vet
    "PD",
    # numpy
    "NPY",
    # Ruff-specific rules
    "RUF",
]

ignore = [
    # 開発中は柔軟性を保つ
    "ANN101",  # missing-type-self
    "ANN102",  # missing-type-cls
    "ANN401",  # any-type (開発時は許可)
    "B008",    # function-call-in-default-argument
    "B904",    # raise-without-from-inside-except
    "E501",    # line-too-long (ruff formatが処理)
    "RUF001",  # ambiguous-unicode-character-string
    "RUF002",  # ambiguous-unicode-character-docstring
    "RUF003",  # ambiguous-unicode-character-comment
    "RUF012",  # mutable-class-default
]

unfixable = ["F401", "F841"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"tests/**/*.py" = ["ANN", "S101", "PLR2004", "F401", "UP035", "PTH123", "ASYNC101"]
"scripts/**/*.py" = ["T201", "S602"]
"orchestration/**/*.py" = ["F401", "F841", "UP035", "ANN", "F811", "PTH123", "PTH118", "PTH103", "PTH120"]

[tool.ruff.lint.isort]
known-first-party = ["orchestration"]
known-third-party = ["agno", "ollama", "fastapi", "pydantic"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy設定
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
extra_checks = true

[[tool.mypy.overrides]]
module = ["agno.*", "ollama.*"]
ignore_missing_imports = true

# Pytest設定
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=orchestration",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "ai: marks tests that require AI models",
]
asyncio_mode = "auto"

# Coverage設定
[tool.coverage.run]
source = ["orchestration"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit設定 (セキュリティ)
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
tests = ["B201", "B301", "B302", "B303", "B304", "B305", "B306", "B307", "B308", "B309", "B310", "B311", "B312", "B313", "B314", "B315", "B316", "B317", "B318", "B319", "B320", "B321", "B323", "B324", "B325"]

[tool.bandit.assert_used]
skips = ["**/test_*.py", "**/conftest.py"]
