from typing import Protocol, List, Any
from ..types import OrchestrationMessage

class AIComponentProtocol(Protocol):
    """AIコンポーネントの基本インターフェース"""
    def process_message(self, message: OrchestrationMessage) -> List[OrchestrationMessage]: ...

class DirectorProtocol(AIComponentProtocol, Protocol):
    """Director AIのインターフェース"""
    def control_process(self, task_id: str) -> None: ...
    def integrate_results(self, results: List[Any]) -> Any: ...

class PlannerProtocol(AIComponentProtocol, Protocol):
    """Planner AIのインターフェース"""
    def analyze_requirements(self, requirements: List[str]) -> List[str]: ...
    def validate_solution(self, solution: Any) -> bool: ...

class WorkerProtocol(AIComponentProtocol, Protocol):
    """Worker AIのインターフェース"""
    def execute_task(self, task: Any) -> Any: ...
    def stop_task(self, task_id: str) -> None: ...

class ReviewerProtocol(AIComponentProtocol, Protocol):
    """Reviewer AIのインターフェース"""
    def evaluate_solution(self, solution: Any) -> List[str]: ...
    def suggest_improvements(self, evaluation: List[str]) -> List[str]: ... 